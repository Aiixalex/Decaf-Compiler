; ModuleID = 'float'
source_filename = "DecafComp"

@globalstring = private unnamed_addr constant [2 x i8] c"/\00"
@globalstring.1 = private unnamed_addr constant [4 x i8] c" = \00"
@globalstring.2 = private unnamed_addr constant [2 x i8] c".\00"
@globalstring.3 = private unnamed_addr constant [2 x i8] c"\0A\00"

declare void @print_int(i32)

declare void @print_string(i8*)

define i32 @main() {
entry:
  %x = alloca i32
  store i32 0, i32* %x
  %y = alloca i32
  store i32 0, i32* %y
  store i32 -14, i32* %x
  store i32 13, i32* %y
  %x1 = load i32, i32* %x
  call void @print_int(i32 %x1)
  call void @print_string(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @globalstring, i32 0, i32 0))
  %y2 = load i32, i32* %y
  call void @print_int(i32 %y2)
  call void @print_string(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @globalstring.1, i32 0, i32 0))
  %x3 = load i32, i32* %x
  %y4 = load i32, i32* %y
  %divtmp = sdiv i32 %x3, %y4
  call void @print_int(i32 %divtmp)
  call void @print_string(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @globalstring.2, i32 0, i32 0))
  %x5 = load i32, i32* %x
  %multmp = mul i32 %x5, 10000000
  %y6 = load i32, i32* %y
  %divtmp7 = sdiv i32 %multmp, %y6
  %x8 = load i32, i32* %x
  %y9 = load i32, i32* %y
  %divtmp10 = sdiv i32 %x8, %y9
  %multmp11 = mul i32 %divtmp10, 10000000
  %subtmp = sub i32 %divtmp7, %multmp11
  %calltmp = call i32 @abs(i32 %subtmp)
  call void @print_int(i32 %calltmp)
  call void @print_string(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @globalstring.3, i32 0, i32 0))
  ret i32 0
}

define i32 @abs(i32 %x) {
entry:
  %x1 = alloca i32
  store i32 %x, i32* %x1
  br label %ifstart

ifstart:                                          ; preds = %entry
  %x2 = load i32, i32* %x1
  %gttmp = icmp sgt i32 %x2, 0
  br i1 %gttmp, label %iftrue, label %iffalse

iftrue:                                           ; preds = %ifstart
  %x3 = load i32, i32* %x1
  ret i32 %x3
  br label %iffalse

iffalse:                                          ; preds = %iftrue, %ifstart
  %x4 = load i32, i32* %x1
  %negtmp = sub i32 0, %x4
  ret i32 %negtmp
  ret i32 0
}

output prefix: llvm/dev/var4
llvmas: /usr/lib/llvm-7/bin/llvm-as
llc: /usr/lib/llvm-7/bin/llc
cc: clang
codegen: /home/alex_wang_10/repos/cmpt379-1207-ywa340/decafcomp/answer/decafcomp
stdlib: /home/alex_wang_10/repos/cmpt379-1207-ywa340/decafcomp/answer/decaf-stdlib.c
generating llvm code:/home/alex_wang_10/repos/cmpt379-1207-ywa340/decafcomp/answer/decafcomp ... ok
; ModuleID = 'Test'
source_filename = "DecafComp"

declare void @print_int(i32)

define i32 @main() {
entry:
  %p = alloca i32
  store i32 0, i32* %p
  %q = alloca i32
  store i32 0, i32* %q
  %r = alloca i32
  store i32 0, i32* %r
  %s = alloca i32
  store i32 0, i32* %s
  %p1 = load i32, i32* %p
  call void @print_int(i32 %p1)
  %q2 = load i32, i32* %q
  call void @print_int(i32 %q2)
  %r3 = load i32, i32* %r
  call void @print_int(i32 %r3)
  %s4 = load i32, i32* %s
  call void @print_int(i32 %s4)
  store i32 1, i32* %p
  %p5 = load i32, i32* %p
  store i32 %p5, i32* %q
  %q6 = load i32, i32* %q
  store i32 %q6, i32* %r
  %r7 = load i32, i32* %r
  store i32 %r7, i32* %s
  %p8 = load i32, i32* %p
  call void @print_int(i32 %p8)
  %q9 = load i32, i32* %q
  call void @print_int(i32 %q9)
  %r10 = load i32, i32* %r
  call void @print_int(i32 %r10)
  %s11 = load i32, i32* %s
  call void @print_int(i32 %s11)
  ret i32 0
}
assembling to bitcode:/usr/lib/llvm-7/bin/llvm-as "llvm/dev/var4.llvm" -o "llvm/dev/var4.llvm.bc" ... ok
converting to native code:/usr/lib/llvm-7/bin/llc "llvm/dev/var4.llvm.bc" -o "llvm/dev/var4.llvm.s" ... ok
linking:clang -o "llvm/dev/var4.llvm.exec" "llvm/dev/var4.llvm.s" "/home/alex_wang_10/repos/cmpt379-1207-ywa340/decafcomp/answer/decaf-stdlib.c" ... ok
running:llvm/dev/var4.llvm.exec ... ok

output prefix: llvm/dev/boolcallcallerexpr
llvmas: /usr/lib/llvm-7/bin/llvm-as
llc: /usr/lib/llvm-7/bin/llc
cc: clang
codegen: /home/alex_wang_10/repos/cmpt379-1207-ywa340/decafcomp/answer/decafcomp
stdlib: /home/alex_wang_10/repos/cmpt379-1207-ywa340/decafcomp/answer/decaf-stdlib.c
generating llvm code:/home/alex_wang_10/repos/cmpt379-1207-ywa340/decafcomp/answer/decafcomp ... ok
; ModuleID = 'Test'
source_filename = "DecafComp"

declare void @print_int(i32)

define void @test(i1 %a) {
entry:
  %a1 = alloca i1
  store i1 %a, i1* %a1
  br label %ifstart

ifstart:                                          ; preds = %entry
  %a2 = load i1, i1* %a1
  br i1 %a2, label %iftrue, label %iffalse

iftrue:                                           ; preds = %ifstart
  call void @print_int(i32 1)
  br label %iffalse

iffalse:                                          ; preds = %iftrue, %ifstart
  ret void
}

define i32 @main() {
entry:
  br i1 true, label %noskct, label %skctend

noskct:                                           ; preds = %entry
  br label %skctend

skctend:                                          ; preds = %noskct, %entry
  %phival = phi i1 [ true, %entry ], [ true, %noskct ]
  call void @test(i1 %phival)
  ret i32 0
}
assembling to bitcode:/usr/lib/llvm-7/bin/llvm-as "llvm/dev/boolcallcallerexpr.llvm" -o "llvm/dev/boolcallcallerexpr.llvm.bc" ... ok
converting to native code:/usr/lib/llvm-7/bin/llc "llvm/dev/boolcallcallerexpr.llvm.bc" -o "llvm/dev/boolcallcallerexpr.llvm.s" ... ok
linking:clang -o "llvm/dev/boolcallcallerexpr.llvm.exec" "llvm/dev/boolcallcallerexpr.llvm.s" "/home/alex_wang_10/repos/cmpt379-1207-ywa340/decafcomp/answer/decaf-stdlib.c" ... ok
running:llvm/dev/boolcallcallerexpr.llvm.exec ... ok

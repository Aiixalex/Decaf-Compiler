output prefix: llvm/dev/for-simple
llvmas: /usr/lib/llvm-7/bin/llvm-as
llc: /usr/lib/llvm-7/bin/llc
cc: clang
codegen: /home/alex_wang_10/repos/cmpt379-1207-ywa340/decafcomp/answer/decafcomp
stdlib: /home/alex_wang_10/repos/cmpt379-1207-ywa340/decafcomp/answer/decaf-stdlib.c
generating llvm code:/home/alex_wang_10/repos/cmpt379-1207-ywa340/decafcomp/answer/decafcomp ... ok
; ModuleID = 'C'
source_filename = "DecafComp"

declare void @print_int(i32)

define i32 @main() {
entry:
  %i = alloca i32
  store i32 0, i32* %i
  store i32 0, i32* %i
  br label %forstart

forstart:                                         ; preds = %fornext, %entry
  %i1 = load i32, i32* %i
  %lttmp = icmp slt i32 %i1, 10
  br i1 %lttmp, label %fortrue, label %forend

fortrue:                                          ; preds = %forstart
  %i2 = load i32, i32* %i
  call void @print_int(i32 %i2)
  br label %fornext

fornext:                                          ; preds = %fortrue
  %i3 = load i32, i32* %i
  %addtmp = add i32 %i3, 1
  store i32 %addtmp, i32* %i
  br label %forstart

forend:                                           ; preds = %forstart
  ret i32 0
}
assembling to bitcode:/usr/lib/llvm-7/bin/llvm-as "llvm/dev/for-simple.llvm" -o "llvm/dev/for-simple.llvm.bc" ... ok
converting to native code:/usr/lib/llvm-7/bin/llc "llvm/dev/for-simple.llvm.bc" -o "llvm/dev/for-simple.llvm.s" ... ok
linking:clang -o "llvm/dev/for-simple.llvm.exec" "llvm/dev/for-simple.llvm.s" "/home/alex_wang_10/repos/cmpt379-1207-ywa340/decafcomp/answer/decaf-stdlib.c" ... ok
running:llvm/dev/for-simple.llvm.exec ... ok

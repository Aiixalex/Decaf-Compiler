output prefix: llvm/dev/prec
llvmas: /usr/lib/llvm-7/bin/llvm-as
llc: /usr/lib/llvm-7/bin/llc
cc: clang
codegen: /home/alex_wang_10/repos/cmpt379-1207-ywa340/decafcomp/answer/decafcomp
stdlib: /home/alex_wang_10/repos/cmpt379-1207-ywa340/decafcomp/answer/decaf-stdlib.c
generating llvm code:/home/alex_wang_10/repos/cmpt379-1207-ywa340/decafcomp/answer/decafcomp ... ok
; ModuleID = 'prec'
source_filename = "DecafComp"

declare void @print_int(i32)

define i32 @main() {
entry:
  %a = alloca i32
  store i32 0, i32* %a
  %b = alloca i32
  store i32 0, i32* %b
  %d = alloca i32
  store i32 0, i32* %d
  %c = alloca i1
  store i1 false, i1* %c
  store i32 3, i32* %a
  store i32 7, i32* %b
  br i1 true, label %skctend, label %noskct

noskct:                                           ; preds = %entry
  br label %skctend

skctend:                                          ; preds = %noskct, %entry
  %phival = phi i1 [ true, %entry ], [ true, %noskct ]
  store i1 %phival, i1* %c
  store i32 -3, i32* %d
  br label %ifstart

ifstart:                                          ; preds = %skctend
  %c1 = load i1, i1* %c
  br i1 %c1, label %iftrue, label %iffalse

iftrue:                                           ; preds = %ifstart
  %a2 = load i32, i32* %a
  call void @print_int(i32 %a2)
  %b3 = load i32, i32* %b
  call void @print_int(i32 %b3)
  %c4 = load i1, i1* %c
  %zexttmp = zext i1 %c4 to i32
  call void @print_int(i32 %zexttmp)
  %d5 = load i32, i32* %d
  call void @print_int(i32 %d5)
  br label %iffalse

iffalse:                                          ; preds = %iftrue, %ifstart
  ret i32 0
}
assembling to bitcode:/usr/lib/llvm-7/bin/llvm-as "llvm/dev/prec.llvm" -o "llvm/dev/prec.llvm.bc" ... ok
converting to native code:/usr/lib/llvm-7/bin/llc "llvm/dev/prec.llvm.bc" -o "llvm/dev/prec.llvm.s" ... ok
linking:clang -o "llvm/dev/prec.llvm.exec" "llvm/dev/prec.llvm.s" "/home/alex_wang_10/repos/cmpt379-1207-ywa340/decafcomp/answer/decaf-stdlib.c" ... ok
running:llvm/dev/prec.llvm.exec ... ok

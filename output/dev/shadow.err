output prefix: llvm/dev/shadow
llvmas: /usr/lib/llvm-7/bin/llvm-as
llc: /usr/lib/llvm-7/bin/llc
cc: clang
codegen: /home/alex_wang_10/repos/cmpt379-1207-ywa340/decafcomp/answer/decafcomp
stdlib: /home/alex_wang_10/repos/cmpt379-1207-ywa340/decafcomp/answer/decaf-stdlib.c
generating llvm code:/home/alex_wang_10/repos/cmpt379-1207-ywa340/decafcomp/answer/decafcomp ... ok
; ModuleID = 'Test'
source_filename = "DecafComp"

declare void @print_int(i32)

define i32 @main() {
entry:
  %x = alloca i32
  store i32 0, i32* %x
  %y = alloca i32
  store i32 0, i32* %y
  store i32 1, i32* %x
  store i32 100, i32* %y
  %x1 = load i32, i32* %x
  call void @print_int(i32 %x1)
  %y2 = load i32, i32* %y
  call void @print_int(i32 %y2)
  %x3 = alloca i32
  store i32 0, i32* %x3
  store i32 2, i32* %x3
  %x4 = load i32, i32* %x3
  call void @print_int(i32 %x4)
  %y5 = load i32, i32* %y
  call void @print_int(i32 %y5)
  %x6 = alloca i32
  store i32 0, i32* %x6
  store i32 3, i32* %x6
  %x7 = load i32, i32* %x6
  call void @print_int(i32 %x7)
  %y8 = load i32, i32* %y
  call void @print_int(i32 %y8)
  %x9 = alloca i32
  store i32 0, i32* %x9
  store i32 4, i32* %x9
  %x10 = load i32, i32* %x9
  call void @print_int(i32 %x10)
  %y11 = load i32, i32* %y
  call void @print_int(i32 %y11)
  %x12 = alloca i32
  store i32 0, i32* %x12
  store i32 5, i32* %x12
  %x13 = load i32, i32* %x12
  call void @print_int(i32 %x13)
  %y14 = load i32, i32* %y
  call void @print_int(i32 %y14)
  ret i32 0
}
assembling to bitcode:/usr/lib/llvm-7/bin/llvm-as "llvm/dev/shadow.llvm" -o "llvm/dev/shadow.llvm.bc" ... ok
converting to native code:/usr/lib/llvm-7/bin/llc "llvm/dev/shadow.llvm.bc" -o "llvm/dev/shadow.llvm.s" ... ok
linking:clang -o "llvm/dev/shadow.llvm.exec" "llvm/dev/shadow.llvm.s" "/home/alex_wang_10/repos/cmpt379-1207-ywa340/decafcomp/answer/decaf-stdlib.c" ... ok
running:llvm/dev/shadow.llvm.exec ... ok

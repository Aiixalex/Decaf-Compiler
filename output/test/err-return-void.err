output prefix: llvm/test/err-return-void
llvmas: /usr/lib/llvm-7/bin/llvm-as
llc: /usr/lib/llvm-7/bin/llc
cc: clang
codegen: /home/alex_wang_10/repos/cmpt379-1207-ywa340/decafcomp/answer/decafcomp
stdlib: /home/alex_wang_10/repos/cmpt379-1207-ywa340/decafcomp/answer/decaf-stdlib.c
generating llvm code:/home/alex_wang_10/repos/cmpt379-1207-ywa340/decafcomp/answer/decafcomp ... ok
; ModuleID = 'retvalue'
source_filename = "DecafComp"

define void @foo() {
entry:
  ret void
}

define i32 @main() {
entry:
  br label %ifstart

ifstart:                                          ; preds = %entry
  call void @foo()
  br void <badref>, label %iftrue, label %iffalse

iftrue:                                           ; preds = %ifstart
  br label %iffalse

iffalse:                                          ; preds = %iftrue, %ifstart
  ret i32 0
}
assembling to bitcode:/usr/lib/llvm-7/bin/llvm-as "llvm/test/err-return-void.llvm" -o "llvm/test/err-return-void.llvm.bc" ... non-zero return value (1)
/usr/lib/llvm-7/bin/llvm-as: llvm/test/err-return-void.llvm:15:6: error: void type only allowed for function results
  br void <badref>, label %iftrue, label %iffalse
     ^
converting to native code:/usr/lib/llvm-7/bin/llc "llvm/test/err-return-void.llvm.bc" -o "llvm/test/err-return-void.llvm.s" ... ok
linking:clang -o "llvm/test/err-return-void.llvm.exec" "llvm/test/err-return-void.llvm.s" "/home/alex_wang_10/repos/cmpt379-1207-ywa340/decafcomp/answer/decaf-stdlib.c" ... ok
running:llvm/test/err-return-void.llvm.exec ... ok

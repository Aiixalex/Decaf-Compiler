output prefix: llvm/ywa340/short-circuit-bool
llvmas: /usr/lib/llvm-7/bin/llvm-as
llc: /usr/lib/llvm-7/bin/llc
cc: clang
codegen: /home/alex_wang_10/repos/cmpt379-1207-ywa340/decafcomp/answer/decafcomp
stdlib: /home/alex_wang_10/repos/cmpt379-1207-ywa340/decafcomp/answer/decaf-stdlib.c
generating llvm code:/home/alex_wang_10/repos/cmpt379-1207-ywa340/decafcomp/answer/decafcomp ... ok
; ModuleID = 'C'
source_filename = "DecafComp"

@globalstring = private unnamed_addr constant [4 x i8] c"foo\00"
@globalstring.1 = private unnamed_addr constant [4 x i8] c"bar\00"

declare void @print_int(i32)

declare void @print_string(i8*)

define i1 @foo(i32 %x) {
entry:
  %x1 = alloca i32
  store i32 %x, i32* %x1
  call void @print_string(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @globalstring, i32 0, i32 0))
  %x2 = load i32, i32* %x1
  %gttmp = icmp sgt i32 %x2, 200
  ret i1 %gttmp
  ret i1 false
}

define i1 @bar(i32 %x, i32 %y) {
entry:
  %x1 = alloca i32
  store i32 %x, i32* %x1
  %y2 = alloca i32
  store i32 %y, i32* %y2
  call void @print_string(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @globalstring.1, i32 0, i32 0))
  %x3 = load i32, i32* %x1
  %y4 = load i32, i32* %y2
  %neqtmp = icmp ne i32 %x3, %y4
  ret i1 %neqtmp
  ret i1 false
}

define i32 @main() {
entry:
  %x = alloca i32
  store i32 0, i32* %x
  %y = alloca i32
  store i32 0, i32* %y
  %w = alloca i1
  store i1 false, i1* %w
  store i32 99, i32* %x
  store i32 201, i32* %y
  %x3 = load i32, i32* %x
  %geqtmp = icmp sge i32 %x3, 100
  br i1 %geqtmp, label %skctend2, label %noskct1

noskct:                                           ; preds = %skctend2
  br i1 true, label %noskct11, label %skctend12

skctend:                                          ; preds = %skctend12, %skctend2
  %phival14 = phi i1 [ %phival10, %skctend2 ], [ %phival13, %skctend12 ]
  store i1 %phival14, i1* %w
  %w15 = load i1, i1* %w
  %zexttmp = zext i1 %w15 to i32
  call void @print_int(i32 %zexttmp)
  ret i32 0

noskct1:                                          ; preds = %entry
  %x6 = load i32, i32* %x
  %calltmp = call i1 @foo(i32 %x6)
  br i1 %calltmp, label %noskct4, label %skctend5

skctend2:                                         ; preds = %skctend5, %entry
  %phival10 = phi i1 [ %geqtmp, %entry ], [ %phival, %skctend5 ]
  br i1 %phival10, label %skctend, label %noskct

noskct4:                                          ; preds = %noskct1
  %x7 = load i32, i32* %x
  %y8 = load i32, i32* %y
  %calltmp9 = call i1 @bar(i32 %x7, i32 %y8)
  br label %skctend5

skctend5:                                         ; preds = %noskct4, %noskct1
  %phival = phi i1 [ %calltmp, %noskct1 ], [ %calltmp9, %noskct4 ]
  br label %skctend2

noskct11:                                         ; preds = %noskct
  br label %skctend12

skctend12:                                        ; preds = %noskct11, %noskct
  %phival13 = phi i1 [ true, %noskct ], [ false, %noskct11 ]
  br label %skctend
}
assembling to bitcode:/usr/lib/llvm-7/bin/llvm-as "llvm/ywa340/short-circuit-bool.llvm" -o "llvm/ywa340/short-circuit-bool.llvm.bc" ... ok
converting to native code:/usr/lib/llvm-7/bin/llc "llvm/ywa340/short-circuit-bool.llvm.bc" -o "llvm/ywa340/short-circuit-bool.llvm.s" ... ok
linking:clang -o "llvm/ywa340/short-circuit-bool.llvm.exec" "llvm/ywa340/short-circuit-bool.llvm.s" "/home/alex_wang_10/repos/cmpt379-1207-ywa340/decafcomp/answer/decaf-stdlib.c" ... ok
running:llvm/ywa340/short-circuit-bool.llvm.exec ... ok
